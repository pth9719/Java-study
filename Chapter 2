컴퓨터 내부를 구성하는 반도체는 데이터를 0과 1로만 표현할 수 있다. 이와 같이 0과 1로만 표현할 수 있는 최소 단위를 비트(bit)라고 하며, 8비트가 모여 1바이트(byte)가 된다.
컴퓨터 내부에서는 숫자뿐만 아니라 문자도 2진수로 표현한다. 예를 들어, A라는 문자는 65로 표현된다. 이를 아스키(ASCII) 값이라 한다. 컴퓨터는 아스키 값을 2진수로 변환하여 이해할 수 있다. 65는 2진수로 1000001이다.

부호를 나타내는 비트는 맨 앞에 붙여 부호 비트라 부른다. 부호 비트가 0이면 양수, 1이면 음수를 나타낸다. 65를 부호 비트를 포함하여 표현하면 01000001이다.

프로그래밍 시, 처음에 사용한 값과 다르게 변하는 값이 있다. 이를 변수라고 한다. 변수를 사용하기 위해 어떤 자료형을 쓸 것인지 정해야 한다.
사람의 나이를 저장하려면 정수형, 이름을 저장하려면 문자형을 써야 한다. 자료형을 정했다면 변수의 이름을 정해야 한다. 이름을 정하는 것을 변수를 선언한다고 표현한다.
=은 오른쪽 값을 왼쪽 값에 대입한다고 한다.
변수 선언과 동시에 대입을 하는 것을 초기화라고 한다.
 
변수 이름은 영어(소문자, 대문자)나 숫자를 사용할 수 있고, 특수 문자 중 $, _만 사용할 수 있다. 하지만, 숫자로 시작할 수 없으며, 자바에서 사용 중인 예약어도 사용 불가능하다.

변수는 컴퓨터 내부의 메모리 공간에 저장된다. 자료형에 따라 저장될 공간의 크기가 다르다.
아래 마크다운 README 참조
 
|바이트 크기\자료형|정수형|문자형|실수형|논리형|문자열형|
|------|---|---|---|---|---|
|1바이트|byte|||boolean||
|2바이트|short|char|||string|
|4바이트|int||float|||
|8바이트|long||double|||

int num1 = 10; // 10진수 10을 의미
int num2 = 0B00000000000000000000000000001010; // 2진수 10을 의미
int num3 = 0B11111111111111111111111111110110; // 2진수 -10을 의미, 2진수 10에서 각 자리의 숫자를 바꾸고 마지막 자리에 1을 더한다.
int num4 = 0B1010; // 2진수 10을 의미
int num5 = 012; // 8진수 10을 의미
int num6 = 0XA; // 16진수 10을 의미

char는 정수형도 가능하지만, 음수는 불가능하다.

자바는 기본적으로 모든 정수를 4바이트로 처리한다. 숫자가 12345678912가 있는 경우, 8바이트 자료이므로 식별자인 L을 붙여야 한다.

long num = 123445678912L;

문자를 정해진 코드 값으로 변환하는 것을 인코딩이라 하며, 코드 값을 다시 문자로 변환하는 것을 디코딩이라 한다.
 
영어는 1바이트로 표현 가능하지만, 한글이나 다른 언어는 2바이트 이상을 사용한다. 따라서, 문자형인 char는 2바이트를 사용한다.

프로그래밍에서 문자를 표현할 때, '문자'를, 문자열을 표현할 때, "문자열"을 사용한다.

char character = 'a';

string word = "exercise";

\는 ￦와 동일한 의미다.

컴퓨터는 실수를 2진수로 변환하여 이해한다. 이를 부동 소수점 방식이라 한다. 자바에서는 실수의 기본형으로 double을 사용한다. 그렇기 때문에, float을 사용하는 경우 반드시 식별자인 F를 붙여야 한다.
 
float pi = 3.14F;

var를 통해 자료형 없이 변수를 선언할 수 있다.

변수와 달리 항상 변하지 않는 값을 상수라 한다. 자바에서 상수를 선언하기 위해 예약어인 final을 사용하고 자료형을 적어야 한다. 상수 이름은 주로 대문자로 시작하며, 여러 단어를 연결하는 경우 _를 사용한다. 초기화하는 것이 편리하다.

final double PI = 3.14;

final float MIN_NUM = 1.11F;

리터럴(literal)이란 프로그램에서 사용하는 모든 숫자, 문자, 논리값을 말한다.

자료형이 다르면 컴퓨터 내부에서 연산을 수행할 수 없기 때문에 자료 형 변환이 필요하다. 형 변환은 자동 형 변환과 강제 형 변환이 있다. 자료 크기가 작은 자료형에서 그리고 덜 정밀한 자료형에서 큰 자료형과 정밀한 자료형으로 형 변환이 이루어지는 경우, 자료 손실이 발생하지 않지만, 그 반대는 자료 손실이 발생할 수 있다.
강제 형 변환을 하기 위해 괄호 안에 바꿀 자료형을 써야 한다.

int iNum1 = 10;
byte bNum = (byte)iNUM1;

double PI = 3.14;
int iNum2 = (int)PI;
