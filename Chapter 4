조건문 : 조건식에 따라 수행문을 수행
 
if문

if (조건식) {
수행문; // 조건식이 참일 경우, 수행문 수행, {}를 블록이라고 한다.
}

int age = 10;
if (age >= 8) {
System.out.println("학교에 다닌다.");
}

if-else문

if (조건식) {
수행문1; // 조건식이 참일 경우, 수행문1 수행
}
else {
수행문2; // 조건식이 거짓일 경우, 수행문2 수행
}

int age = 10;
if (age >= 8) {
System.out.println("학교에 다닌다.");
}
else {
System.out.println("학교에 다니지 않는다.");
}

if-else if-else문

if (조건식1) {
수행문1; // 조건식1이 참일 경우, 수행문1 수행
}
else if(조건식2) {
수행문2; // 조건식2이 참일 경우, 수행문2 수행
}
else if(조건식3) {
수행문3; // 조건식3이 참일 경우, 수행문3 수행
}
else {
수행문4; // 조건식1, 2, 3이 거짓일 경우, 수행문4 수행
}
수행문5; // 있어도 되고, 없어도 된다.

if-if문은 각 조건마다 비교함에 주의한다.

switch-case문

switch(조건){
case값1 : 수행문1;
break; // 값이 맞으면 수행문을 수행하고 switch-case문을 빠져나오게 하는 역할
case값2 : 수행문2;
break;
case값3 : 수행문3;
break;
default : 수행문4 // 모든 조건을 만족하지 않는 경우 수행문4를 수행하며, default는 생략 가능

같은 값인 경우 case문을 동시에 사용할 수 있다.

switch(조건){
case값1 : case값 4 : case 값 5 : 수행문1;
break; 
case값2 : case값 6 : 수행문2;
break;
case값3 : case값 7 : 수행문3;
break;

반복문 : 조건식에 따라 수행문을 반복

while문 : 조건식이 참인 동안 수행문 반복

while(조건식) {
수행문1;
}
수행문2;

while문을 무한히 반복하려는 경우, 조건식에 true 값을 넣는다.

do-while문 : 조건 만족 여부를 마지막에 확인

do {
수행문1;
} while(조건식) {
수행문2;
}

for문 : 반복문 중 가독성이 가장 뛰어남

for(초기화식; 조건식; 증감식) { // 경우에 따라 초기화식 또는 조건식 또는 증감식을 생략할 수 있다.
수행문;
}

if-continue문 : for문으로 다시 돌아감
if(조건)
continue;
